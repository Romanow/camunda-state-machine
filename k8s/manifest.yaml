NAME: wiremock
LAST DEPLOYED: Mon Jan 16 02:09:47 2023
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
consumer:
  name: my-consumer
  stubs:
    services-stubs: /mnt/services-stubs
image:
  tag: 2.26.0
java:
  xms: 256M
  xmx: 512M
pdb:
  enabled: false
resources:
  limits:
    cpu: 100m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 512Mi
service:
  port: 9999

COMPUTED VALUES:
affinity: {}
consumer:
  args: []
  args_include_default: true
  environment: {}
  initContainer: []
  initVolume: []
  name: my-consumer
  stubs:
    services-stubs: /mnt/services-stubs
deploymentAnnotations: {}
extraLabels: {}
fullnameOverride: ""
hpa:
  cputhreshold: 40
  enabled: true
  maxpods: 40
  minpods: 1
image:
  pullPolicy: IfNotPresent
  pullSecrets: []
  repository: rodolpheche/wiremock
  tag: 2.26.0
ingress:
  annotations: {}
  block_admin: true
  className: ""
  enabled: false
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
init:
  image:
    repository: busybox
    tag: latest
java:
  mms: 256M
  xms: 256M
  xmx: 512M
nameOverride: ""
nodeSelector: {}
pdb:
  enabled: false
podAnnotations: {}
probes:
  liveness: true
  readiness: true
replicas: 1
resources:
  limits:
    cpu: 100m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 512Mi
service:
  port: 9999
  type: ClusterIP
serviceAnnotations: {}
strategy:
  type: RollingUpdate
tolerations: []

HOOKS:
MANIFEST:
---
# Source: wiremock/templates/configmap-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wiremock-config
  labels:
    helm.sh/chart: wiremock-1.3.0
    app.kubernetes.io/name: wiremock
    app.kubernetes.io/instance: wiremock
    app.kubernetes.io/version: "2.26.0"
    app.kubernetes.io/managed-by: Helm
    heritage: "Helm"
    release: "wiremock"
    chart: "wiremock-1.3.0"
    consumer: "my-consumer"
data:
  init.sh: |
    #!/bin/sh
    
    set -eu
    
    mkdir -p /working/mappings
    mkdir -p /working/__files
    
    cp -L /config/status.json /working/mappings/status.json
    
    for mount_path in $(env | grep '^WMSTUBS' | cut -d'=' -f2)
    do
      cp -rL "${mount_path}/mappings" /working
      cp -rL "${mount_path}/__files" /working
    done
  status.json: |
    // provides the status endpoint for k8s readyness and liveness probes
    {
      "request" : {
        "url" : "/status",
        "method" : "GET"
      },
      "response" : {
        "status" : "200",
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "jsonBody": {
          "status": "ok"
        }
      }
    }
  log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="ERROR">
        <Properties>
            <Property name="logLevel">${sys:wm.logging.level:-${env.WM_LOGGING_LEVEL:-info}}</Property>
        </Properties>
        <Appenders>
            <Console name="console" target="SYSTEM_OUT">
    			<PatternLayout pattern="%d{HH:mm:ss,SSS} %-5p [%mdc{RQID}] [%c{1}] %mdc{CTP}%mdc{EIID}%mdc{ESID}%mdc{EOID}%mdc{CID}- %m%n" />
            </Console>
        </Appenders>
        <Loggers>
            <Logger name="com.ninecookies.wiremock.extensions" level="${logLevel}" />
            <Root level="info">
                <AppenderRef ref="console" />
            </Root>
        </Loggers>
    </Configuration>
---
# Source: wiremock/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: wiremock
  labels:
    helm.sh/chart: wiremock-1.3.0
    app.kubernetes.io/name: wiremock
    app.kubernetes.io/instance: wiremock
    app.kubernetes.io/version: "2.26.0"
    app.kubernetes.io/managed-by: Helm
    heritage: "Helm"
    release: "wiremock"
    chart: "wiremock-1.3.0"
    consumer: "my-consumer"
spec:
  type: ClusterIP
  ports:
    - port: 9999
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: wiremock
    app.kubernetes.io/instance: wiremock
    consumer: "my-consumer"
---
# Source: wiremock/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wiremock
  labels:
    helm.sh/chart: wiremock-1.3.0
    app.kubernetes.io/name: wiremock
    app.kubernetes.io/instance: wiremock
    app.kubernetes.io/version: "2.26.0"
    app.kubernetes.io/managed-by: Helm
    heritage: "Helm"
    release: "wiremock"
    chart: "wiremock-1.3.0"
    consumer: "my-consumer"
spec:
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: wiremock
      app.kubernetes.io/instance: wiremock
      consumer: "my-consumer"
  replicas: 1
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: wiremock-1.3.0
        app.kubernetes.io/name: wiremock
        app.kubernetes.io/instance: wiremock
        app.kubernetes.io/version: "2.26.0"
        app.kubernetes.io/managed-by: Helm
        heritage: "Helm"
        release: "wiremock"
        chart: "wiremock-1.3.0"
        consumer: "my-consumer"
      annotations:
        checksum/config: 3aade6b1ee5d8228def6c4592fc07713c4bd6343b7f43417b8d6a7046a3e6957
    spec:
      initContainers:
      - name: copy-stubs
        image: "busybox:latest"
        env:
        - name: "WMSTUBS_SERVICES_STUBS"
          value: /mnt/services-stubs
        command: ['sh', '/config/init.sh']
        volumeMounts:
        - mountPath: /working
          name: working
        - mountPath: /config/init.sh
          name: config
          subPath: init.sh
        - mountPath: /config/status.json
          name: config
          subPath: status.json
        - name: services-stubs-mappings
          mountPath: /mnt/services-stubs/mappings
        - name: services-stubs-files
          mountPath: /mnt/services-stubs/__files
      containers:
      - name: wiremock
        resources:
          limits:
            cpu: 100m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 512Mi
        image: "rodolpheche/wiremock:2.26.0"
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 8080
          - containerPort: 7091
        env:
          - name: JAVA_OPTS
            value: "-Xms256M -Xmx512M -XX:MaxMetaspaceSize=256M -Dcom.sun.management.jmxremote.port=7091 -Dcom.sun.management.jmxremote.rmi.port=7091 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1"
        args:
          - --disable-banner
          - --no-request-journal
          - --container-threads=300
          - --async-response-enabled
          - --async-response-threads=300
          - --global-response-templating
        readinessProbe:
          httpGet:
            path: /status
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 80
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 2

        volumeMounts:
        - mountPath: /home/wiremock
          name: working
        - mountPath: /var/wiremock/lib/log4j2.xml
          name: config
          subPath: log4j2.xml
      volumes:
      - name: working
        emptyDir: {}
      - name: config
        configMap:
          name: wiremock-config
      - name: services-stubs-mappings
        configMap:
          name: services-stubs-mappings
      - name: services-stubs-files
        configMap:
          name: services-stubs-files
---
# Source: wiremock/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: wiremock
  labels:
    helm.sh/chart: wiremock-1.3.0
    app.kubernetes.io/name: wiremock
    app.kubernetes.io/instance: wiremock
    app.kubernetes.io/version: "2.26.0"
    app.kubernetes.io/managed-by: Helm
    heritage: "Helm"
    release: "wiremock"
    chart: "wiremock-1.3.0"
    consumer: "my-consumer"
spec:
  scaleTargetRef:
    kind: Deployment
    apiVersion: apps/v1
    name: wiremock
  minReplicas: 1
  maxReplicas: 40
  targetCPUUtilizationPercentage: 40

